function [time, pose, wrench] = readRobotState(handles, startTime, orientationType)
%readState Extract pose and wrench from iiwa message
%
%
% Inputs are :
%   - handles generated by initRosiiwa.m
%   - startTime = time just before control loop was started to make the time
% associated to the states relevant to that (instead of january 1st 1970).
%   - orientationType : Quaternions or Angles
%
% outputs:
%       - time              [1 x 1]
%       - pose 
%           Euler:          [6 x 1]
%           Quaternion:     [7 x 1]
%       - wrench:           [6 x 1]
%
% code by Victor van Spaandonk. 
% July 2016

%% Code
% Read latest state messages:
latestPose   = receive(handles.subCartesianPose);
latestWrench = receive(handles.subCartesianWrench);

% compute relative time since start of rollout:
absTime = double(latestPose.Header.Stamp.Sec) + double(latestPose.Header.Stamp.Nsec)/1e9;
time = absTime-startTime;

% Extract numerical pose data:
poseMsg = latestPose.Pose;
xpos = poseMsg.Position.X; ypos = poseMsg.Position.Y; zpos = poseMsg.Position.Z;
quat = poseMsg.Orientation;
if strcmpi(orientationType,'Euler')
    angles = quat2eul([quat.W quat.X quat.Y quat.Z],'ZYZ');
else
    angles = [quat.W quat.X quat.Y quat.Z];
end
pose = double([xpos, ypos, zpos, angles]);

% extract numerical wrench data:
wrenchMsg = latestWrench.Wrench;
xforce = wrenchMsg.Force.X; yforce = wrenchMsg.Force.Y; zforce = wrenchMsg.Force.Z;
xtorque = wrenchMsg.Torque.X; ytorque = wrenchMsg.Torque.Y; ztorque = wrenchMsg.Torque.Z;
wrench = double([xforce, yforce, zforce, xtorque, ytorque, ztorque]);
end